set(MODVARDIR ${CMAKE_CURRENT_BINARY_DIR}/modvar)
file(MAKE_DIRECTORY ${MODVARDIR})
include_directories(${MODVARDIR})
function(debugvars)
	get_cmake_property(_variableNames VARIABLES)
	list (SORT _variableNames)
	foreach (_variableName ${_variableNames})
		message(STATUS "${_variableName}=${${_variableName}}")
	endforeach()
endfunction(debugvars)

function(modular_variable)
	cmake_parse_arguments(PARSE_ARGV 1 V
		"" "TYPE;INIT" "MODULES")
	set(name ${ARGV0})
	set(type ${V_TYPE})
	set(init ${V_INIT})
	foreach(suffix IN ITEMS h internal.h c)
		set(output ${MODVARDIR}/${name}.${suffix})
#		debugvars()
#		file(LOCK ${output})
		file(WRITE ${output}.temp)
		set(targets)
		set(contents)
		foreach(module IN LISTS V_MODULES)
			set(input ${CMAKE_CURRENT_SOURCE_DIR}/modvar/${module}.${suffix}.in)
			message(STATUS DERP ${input})
			if(EXISTS ${input})
				configure_file(${input} ${input}.temp)
				file(READ ${input}.temp contents)
				file(APPEND ${output}.temp "${contents}")
				file(READ ${output}.temp derp)
				message(STATUS APPREST "${derp}")

				#				file(REMOVE ${input}.temp)
				list(APPEND targets ${input})
			endif()
		endforeach(module)
		message(STATUS renaman ${output})
		if(EXISTS ${output}.temp)
			message(STATUS boop)
#			file(REMOVE ${output}.temp1)
			file(RENAME ${output}.temp ${output})
		endif()
#		file(LOCK ${output} RELEASE)
	endforeach(suffix)
endfunction(modular_variable)
