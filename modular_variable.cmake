set(MODVARDIR ${CMAKE_CURRENT_BINARY_DIR}/modvar)
include_directories(${MODVARDIR})
# for clarity in including the headers:
set(MODVARDIR ${MODVARDIR}/modvar)
# i.e. #include "modvar/something.h"
file(MAKE_DIRECTORY ${MODVARDIR})

# so we can actually use the generated sources in our projects :p
set(MODULAR_VARIABLE_SOURCES "" PARENT_SCOPE)

function(modular_variable)
	cmake_parse_arguments(PARSE_ARGV 1 V
		"" "TYPE;INIT" "MODULES")
	set(name ${ARGV0})
	set(type ${V_TYPE})
	set(init ${V_INIT})
	foreach(suffix IN ITEMS h internal.h c)
		set(output ${MODVARDIR}/${name}.${suffix})
#		debugvars()
		file(LOCK ${output}.temp)
		file(WRITE ${output}.temp)
		foreach(module IN LISTS V_MODULES)
			set(input ${CMAKE_CURRENT_SOURCE_DIR}/modvar/${module}.${suffix}.in)
			if(EXISTS ${input})
				configure_file(${input} ${input}.temp)
				file(READ ${input}.temp contents)
				file(APPEND ${output}.temp "${contents}")
				file(READ ${output}.temp derp)
			endif()
		endforeach(module)
		if(EXISTS ${output}.temp)
#			file(REMOVE ${output}.temp1)
			file(RENAME ${output}.temp ${output})
			if("${suffix}" STREQUAL "c")
				# so we can actually use the generated sources in our projects :p
				list(APPEND MODULAR_VARIABLE_SOURCES "${output}")
			endif()
		endif()
		file(LOCK ${output}.temp RELEASE)
	endforeach(suffix)
endfunction(modular_variable)
